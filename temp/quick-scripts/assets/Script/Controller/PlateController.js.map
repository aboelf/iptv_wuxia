{"version":3,"sources":["PlateController.js"],"names":["window","Global","plateController","lineController","map","cc","Class","extends","Component","properties","blockPrefab","Prefab","dotPrefab","debug","ballPrefabs","default","type","ballArea","Node","lineArea","effectArea","emptyPostions","balls","randomRange","min","max","Math","random","randomRangeInt","arguments","length","floor","drawBalls","blockSize","x_0","sqrt","y_0","i","row","j","block","instantiate","children","color","Color","getComponent","Label","string","active","width","height","column","addChild","push","setPosition","v2","getPosition","generateFallingBall","fallingBall","oriBall","parent","ball","onLoad","zIndex","log","isInPlayAni","manager","director","getCollisionManager","enabled","start"],"mappings":";;;;;;AAAA;;AACAA,OAAOC,MAAP,GAAgB;AACZC,qBAAiB,IADL;AAEZC,oBAAgB,IAFJ;AAGZC,SAAI;AAHQ,CAAhB;AAKAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAYL,GAAGM,MADP;AAERC,mBAAUP,GAAGM,MAFL;AAGRE,eAAM,IAHE;AAIRC,qBAAY;AACRC,qBAAQ,EADA;AAERC,kBAAK,CAACX,GAAGM,MAAJ;AAFG,SAJJ;AAQRM,kBAASZ,GAAGa,IARJ;AASRC,kBAASd,GAAGa,IATJ;AAURE,oBAAWf,GAAGa,IAVN;AAWRG,uBAAc,EAXN;AAYRC,eAAM,EAZE;AAaRlB,aAAI;AAbI,KAHP;;AAmBL;AACAmB,eApBK,uBAoBOC,GApBP,EAoBYC,GApBZ,EAoBiB;AAClB,eAAOC,KAAKC,MAAL,MAAiBF,MAAMD,GAAvB,IAA8BA,GAArC;AACH,KAtBI;AAuBLI,kBAvBK,0BAuBUJ,GAvBV,EAuBeC,GAvBf,EAuBoB;AACrB,YAAGI,UAAUC,MAAV,IAAkB,CAArB,EAAuB;AACnB,mBAAOJ,KAAKK,KAAL,CAAW,KAAKR,WAAL,CAAiBC,GAAjB,EAAsBC,GAAtB,CAAX,CAAP;AACH,SAFD,MAEM,IAAGI,UAAUC,MAAV,IAAkB,CAArB,EAAuB;AACzB,mBAAOD,UAAU,CAAV,EAAaH,KAAKK,KAAL,CAAW,KAAKR,WAAL,CAAiB,CAAjB,EAAmBM,UAAU,CAAV,EAAaC,MAAhC,CAAX,CAAb,CAAP;AACH;AACJ,KA7BI;;AA8BL;AACAE,aA/BK,uBA+BM;AACP;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACA,YAAIC,MAAM,IAAE,KAAKD,SAAP,GAAiBP,KAAKS,IAAL,CAAU,CAAV,CAA3B;AACA,YAAIC,MAAM,KAAKH,SAAf;AACA,aAAI,IAAII,IAAE,CAAV,EAAYA,IAAE,CAAd,EAAgBA,GAAhB,EAAoB;AAChB,gBAAIC,MAAM,EAAV;AACA,iBAAI,IAAIC,IAAE,CAAV,EAAYA,IAAE,CAAd,EAAgBA,GAAhB,EAAoB;AAChB,oBAAGF,KAAG,CAAH,IAAQE,IAAE,CAAF,IAAK,CAAhB,EAAkB;AACd;AACH,iBAFD,MAEK;AACD,wBAAIC,QAAQnC,GAAGoC,WAAH,CAAe,KAAK3B,WAAL,CAAiB,KAAKc,cAAL,CAAoB,CAApB,EAAsB,CAAtB,CAAjB,CAAf,CAAZ;AACA,wBAAG,KAAKf,KAAR,EAAc;AACV2B,8BAAME,QAAN,CAAe,CAAf,EAAkBC,KAAlB,GAA0B,IAAItC,GAAGuC,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAA1B;AACAJ,8BAAME,QAAN,CAAe,CAAf,EAAkBG,YAAlB,CAA+BxC,GAAGyC,KAAlC,EAAyCC,MAAzC,GAAgDV,IAAE,GAAF,GAAME,CAAtD;AACH,qBAHD,MAGK;AACDC,8BAAME,QAAN,CAAe,CAAf,EAAkBM,MAAlB,GAAyB,KAAzB;AACH;AACDR,0BAAMS,KAAN,GAAc,GAAd;AACAT,0BAAMU,MAAN,GAAe,GAAf;AACAV,0BAAMF,GAAN,GAAYD,CAAZ;AACAG,0BAAMW,MAAN,GAAeZ,CAAf;AACA,yBAAKtB,QAAL,CAAcmC,QAAd,CAAuBZ,KAAvB;AACA,yBAAKlB,KAAL,CAAW+B,IAAX,CAAgBb,KAAhB;AACA,wBAAGD,IAAE,CAAF,IAAK,CAAR,EAAU;AACNC,8BAAMc,WAAN,CAAkBjD,GAAGkD,EAAH,CAAMhB,IAAEb,KAAKS,IAAL,CAAU,CAAV,CAAF,GAAe,KAAKF,SAApB,GAA8BC,GAApC,EAAwC,KAAKD,SAAL,GAAe,IAAE,KAAKA,SAAP,GAAiBI,CAAxE,CAAlB;AACH,qBAFD,MAEK;AACDG,8BAAMc,WAAN,CAAkBjD,GAAGkD,EAAH,CAAMhB,IAAEb,KAAKS,IAAL,CAAU,CAAV,CAAF,GAAe,KAAKF,SAApB,GAA8BC,GAApC,EAAwC,IAAE,KAAKD,SAAP,GAAiB,IAAE,KAAKA,SAAP,GAAiBI,CAA1E,CAAlB;AACH;AACDC,wBAAIe,IAAJ,CAASb,MAAMgB,WAAN,EAAT;AACH;AACJ;AACD,iBAAKpD,GAAL,CAASiD,IAAT,CAAcf,GAAd;AACH;AACJ,KAjEI;AAmELmB,uBAnEK,iCAmEgB;AACjB,aAAKC,WAAL,GAAiB,EAAjB;AACA,aAAI,IAAIrB,IAAE,CAAV,EAAYA,IAAE,KAAKf,KAAL,CAAWQ,MAAzB,EAAgCO,GAAhC,EAAoC;AAChC,gBAAIsB,UAAU,KAAKrC,KAAL,CAAWe,CAAX,CAAd;AACA,gBAAGsB,QAAQC,MAAR,IAAgB,IAAnB,EAAwB;AACpB,qBAAI,IAAIrB,IAAE,CAAV,EAAYA,IAAE,KAAKlB,aAAL,CAAmBS,MAAjC,EAAwCS,GAAxC,EAA4C;AACxC,wBAAIsB,OAAO,KAAKxC,aAAL,CAAmBkB,CAAnB,CAAX;AACA,wBAAGoB,QAAQR,MAAR,IAAgBU,KAAKV,MAAxB,EAA+B;AAC3B,4BAAGQ,QAAQrB,GAAR,GAAYuB,KAAKvB,GAApB,EAAwB;AACpB,iCAAKoB,WAAL,CAAiBL,IAAjB,CAAsBM,OAAtB;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,KAnFI;AAoFLG,UApFK,oBAoFK;AACN;AACA;AACA,aAAK9B,SAAL;AACA,aAAKZ,UAAL,CAAgB2C,MAAhB,GAAuB,CAAvB;AACA1D,WAAG2D,GAAH,CAAO,KAAK5C,UAAZ;AACA,aAAK6C,WAAL,GAAmB,KAAnB;AACA,YAAIC,UAAU7D,GAAG8D,QAAH,CAAYC,mBAAZ,EAAd;AACAF,gBAAQG,OAAR,GAAkB,IAAlB;AACApE,eAAOC,eAAP,GAAuB,IAAvB;AACAD,eAAOE,cAAP,GAAwB,KAAKgB,QAAL,CAAc0B,YAAd,CAA2B,gBAA3B,CAAxB;AACA5C,eAAOG,GAAP,GAAa,KAAKA,GAAlB;AACH,KAhGI;AAkGLkE,SAlGK,mBAkGI,CAER;AApGI;;AAsGL;AAtGJ","file":"PlateController.js","sourceRoot":"../../../../../assets/Script/Controller","sourcesContent":["import { GRID_WIDTH, GRID_HEIGHT } from \"../Config/Config\";\nwindow.Global = {\n    plateController: null,\n    lineController: null,\n    map:null\n};\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        blockPrefab:cc.Prefab,\n        dotPrefab:cc.Prefab,\n        debug:true,\n        ballPrefabs:{\n            default:[],\n            type:[cc.Prefab]\n        },\n        ballArea:cc.Node,\n        lineArea:cc.Node,\n        effectArea:cc.Node,\n        emptyPostions:[],\n        balls:[],\n        map:[],       \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n    randomRange(min, max) {\n        return Math.random() * (max - min) + min;\n    },\n    randomRangeInt(min, max) {\n        if(arguments.length==2){\n            return Math.floor(this.randomRange(min, max));\n        }else if(arguments.length==1){\n            return arguments[0][Math.floor(this.randomRange(0,arguments[0].length))];\n        }\n    },\n    //根据this.map绘制珠盘\n    drawBalls(){\n        // this.blockSize = (this.node.width-this.gap*(GRID_WIDTH+1))/GRID_WIDTH;\n        this.blockSize = 94;\n        let x_0 = 2*this.blockSize/Math.sqrt(3);\n        let y_0 = this.blockSize;\n        for(let i=0;i<6;i++){\n            let row = [];\n            for(let j=0;j<7;j++){\n                if(i==5 && j%2!=0){\n                    //删除顶端3个珠子\n                }else{\n                    let block = cc.instantiate(this.ballPrefabs[this.randomRangeInt(0,5)]);\n                    if(this.debug){\n                        block.children[0].color = new cc.Color(0, 0, 0);\n                        block.children[0].getComponent(cc.Label).string=i+' '+j;    \n                    }else{\n                        block.children[0].active=false;\n                    }\n                    block.width = 150;\n                    block.height = 150;\n                    block.row = i;\n                    block.column = j;\n                    this.ballArea.addChild(block);\n                    this.balls.push(block);\n                    if(j%2==0){\n                        block.setPosition(cc.v2(j*Math.sqrt(3)*this.blockSize+x_0,this.blockSize+2*this.blockSize*i));\n                    }else{\n                        block.setPosition(cc.v2(j*Math.sqrt(3)*this.blockSize+x_0,2*this.blockSize+2*this.blockSize*i));\n                    }\n                    row.push(block.getPosition());\n                }\n            }\n            this.map.push(row);\n        }\n    },\n\n    generateFallingBall(){\n        this.fallingBall=[];\n        for(let i=0;i<this.balls.length;i++){\n            let oriBall = this.balls[i];\n            if(oriBall.parent!=null){\n                for(let j=0;j<this.emptyPostions.length;j++){\n                    let ball = this.emptyPostions[j];\n                    if(oriBall.column==ball.column){\n                        if(oriBall.row>ball.row){\n                            this.fallingBall.push(oriBall);\n                            continue;\n                        }\n                    }\n                }\n            }\n        }\n    },\n    onLoad () {\n        // this.drawBgBlocks();\n        // this.generateMap();\n        this.drawBalls();\n        this.effectArea.zIndex=1;\n        cc.log(this.effectArea)\n        this.isInPlayAni = false;    \n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        Global.plateController=this;\n        Global.lineController = this.lineArea.getComponent('LineController');\n        Global.map = this.map;\n    },\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n"]}